enum Role {
  ADMIN
  SUPPORT
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[] @relation("UserTickets")
  assigned  Ticket[] @relation("AssignedTickets")
}

model Ticket {
  id          String         @id @default(cuid())
  title       String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  createdBy   User           @relation("UserTickets", fields: [createdById], references: [id])
  createdById String
  assignee    User?          @relation("AssignedTickets", fields: [assigneeId], references: [id])
  assigneeId  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum ProductStatus {
  active
  inactive
  discontinued
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("marcas")
}

model Category {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?           @db.Text
  products    ProductCategory[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("categorias")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String        @db.Text
  sku         String        @unique
  price       Decimal       @db.Decimal(10, 2)
  stock       Int           @default(0)
  status      ProductStatus @default(active)

  brand   Brand  @relation(fields: [brandId], references: [id], onDelete: Restrict)
  brandId String

  categories ProductCategory[]
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([sku])
  @@index([brandId])
  @@index([status])
  @@index([name])
  @@map("productos")
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@id([productId, categoryId])
  @@map("producto_categoria")
}

model Knowledge {
  id        String   @id @default(cuid())
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
